/* ObjC-2.0 scanner - scanner grammar is based on http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
/* part of objc2pp - an obj-c 2 preprocessor */
/* for a quick introduction about Lex see http://dinosaur.compilertools.net/lex/ */

	/* digit */
D			[0-9]
	/* letter */
L			[a-zA-Z_$]
	/* hex letter */
H			[a-fA-F0-9]
	/* exponent: e or E, optional sign and at least one digit */
E			[Ee][+-]?{D}+
	/* float suffix */
FS			(f|F|l|L)
	/* int suffix */
IS			(u|U|l|L)*
	/* white space */
WS			[ \r\t\v\f]
	/* new line */
NL			[\n]
	/* Obj-C @ */
AT			@{WS}*

%{
#include <stdio.h>
#import <ObjCKit/AST.h>
#include "y.tab.h"

/* scanner control */

int nokeyword;	// if set to 1, an IDENTIFIER is always returned (even if it looks like a keyword or type name)
int attoken;	// if set to 1, decode @ keywords (e.g. @interface)
int objctype;	// if set to 1, decode some special identifiers as keywords (e.g. in, byref, oneway)
int typename;	// if set to 1, IDENTIFIERS representing a type name or @class forward declaration are reported as TYPENAME

void charCount(void);
Node *constant(char *str);
int symbol(void);

int column = 0;
int line = 1;
	
struct RESERVED
	{
		NSString *word;
		int token;
	} reserved[]={
	@"asm", ASM, 
	@"auto", AUTO, 
	@"break", BREAK, 
	@"case", CASE, 
	@"char", CHAR, 
	@"const", CONST, 
	@"continue", CONTINUE, 
	@"default", DEFAULT, 
	@"do", DO, 
	@"double", DOUBLE, 
	@"else", ELSE, 
	@"enum", ENUM, 
	@"extern", EXTERN, 
	@"float", FLOAT, 
	@"for", FOR, 
	@"goto", GOTO, 
	@"if", IF, 
	@"int", INT, 
	@"long", LONG, 
	@"register", REGISTER, 
	@"return", RETURN, 
	@"short", SHORT, 
	@"signed", SIGNED, 
	@"sizeof", SIZEOF, 
	@"static", STATIC, 
	@"struct", STRUCT, 
	@"switch", SWITCH, 
	@"typedef", TYPEDEF, 
	@"union", UNION, 
	@"unsigned", UNSIGNED, 
	@"void", VOID, 
	@"volatile", VOLATILE, 
	@"while", WHILE, 

		/* operators - only used for reverse lookup since they are not keywords */
		
		@"...", ELLIPSIS,
		@">>=", RIGHT_ASSIGN,
		@"<<=", LEFT_ASSIGN,
		@"+=", ADD_ASSIGN,
		@"-=", SUB_ASSIGN,
		@"*=", MUL_ASSIGN,
		@"/=", DIV_ASSIGN,
		@"%=", MOD_ASSIGN,
		@"&=", AND_ASSIGN,
		@"^=", XOR_ASSIGN,
		@"|=", OR_ASSIGN,
		@">>", RIGHT_OP,
		@"<<", LEFT_OP,
		@"++", INC_OP,
		@"--", DEC_OP,
		@"->", PTR_OP,
		@"&&", AND_OP,
		@"||", OR_OP,
		@"<=", LE_OP,
		@">=", GE_OP,
		@"==", EQ_OP,
		@"!=", NE_OP,
		
	},

	atreserved[]={
	/* Obj-C 1.0 extensions */
	
	@"interface", AT_INTERFACE,
	@"implementation", AT_IMPLEMENTATION,
	@"end", AT_END,
	@"class", AT_CLASS,
	@"protocol", AT_PROTOCOL,
	@"defs", AT_DEFS,
	@"selector", AT_SELECTOR,
	@"encode", AT_ENCODE,
	@"protected", AT_PROTECTED,
	@"private", AT_PRIVATE,
	@"public", AT_PUBLIC,
		
	/* Obj-C 1.5 extensions */
	
	@"property", AT_PROPERTY,
	@"synthesize", AT_SYNTHESIZE,
	@"optional", AT_OPTIONAL,
	@"required", AT_REQUIRED,
		
	/* Obj-C 2.0 extensions */
		
	@"try", AT_TRY,
	@"catch", AT_CATCH,
	@"finally", AT_FINALLY,
	@"throw", AT_TRY,
	@"synchronized", AT_SYNCHRONIZED,
		
	/* Obj-C 2.5 extensions */
		
	@"autoreleasepool", AT_AUTORELEASEPOOL,
	},

	objcreserved[]={
		/* Obj-C-extensions: */

		@"__unsafe_unretained", UNSAFE_UNRETAINED,
		@"__autoreleasing", AUTORELEASING,
		// these two are real keywords and only allowed in type specifiers
		@"__weak", WEAK,
		@"__strong", STRONG,

	},

	specialreserved[]={
		@"inout", INOUT, 
		@"in", IN, 
		@"out", OUT, 
		@"byref", BYREF, 
		@"bycopy", BYCOPY, 
		@"oneway", ONEWAY, 
	};

Node *scopestack;	/* global and local scope stack */
Node *keywordtab;	/* keyword table */
Node *atkeywordtab;	/* @ keyword table */
Node *specialkeywordtab;	/* special keyword table */

void pushscope(void)
{ // start a new local variable scope
	[scopestack addChild:[Node leaf:@"symtab"]];	// create symbol table for this level
}
	
void popscope(void)
{ // pop scope
	[scopestack removeLastChild];
}	

Node *globals(void)
{
	return [scopestack childAtIndex:0];
}

Node *local(void)
{
	return [scopestack lastChild];
}
	
void makeglobal(Node *identifier)
{ // make this a global entry, i.e. copy to global dictionary
	// check if already global...
	[globals() setAttribute:identifier forKey:[identifier value]];	// copy by name
}

Node *constant(char *str);
	
void scaninit(void)
	{
	int i;
	Node *n;
	keywordtab=[[Node leaf:@"$keywords$"] retain];
	for(i=0; i<sizeof(reserved)/sizeof(reserved[0]); i++)
		{ // use attributes as keyword symbol table
			[keywordtab setAttribute:[NSNumber numberWithInt:reserved[i].token] forKey:reserved[i].word];
		}
	for(i=0; i<sizeof(objcreserved)/sizeof(objcreserved[0]); i++)
		{ // use attributes as keyword symbol table
			[keywordtab setAttribute:[NSNumber numberWithInt:objcreserved[i].token] forKey:objcreserved[i].word];
		}
	atkeywordtab=[[Node leaf:@"$keywords$"] retain];
	for(i=0; i<sizeof(atreserved)/sizeof(atreserved[0]); i++)
		{ // use attributes as keyword symbol table
			[atkeywordtab setAttribute:[NSNumber numberWithInt:atreserved[i].token] forKey:atreserved[i].word];
		}
	specialkeywordtab=[[Node leaf:@"$keywords$"] retain];
	for(i=0; i<sizeof(specialreserved)/sizeof(specialreserved[0]); i++)
		{ // use attributes as keyword symbol table
			[specialkeywordtab setAttribute:[NSNumber numberWithInt:specialreserved[i].token] forKey:specialreserved[i].word];
		}
#if 0
	NSLog(@"%@", [keywordtab description]);
	NSLog(@"%@", [atkeywordtab description]);
	NSLog(@"%@", [specialkeywordtab description]);
#endif
	scopestack=[[Node leaf:@"stack"] retain];	// use child entries as a stack
	pushscope();	// create initially empty global symbol table
#if 0
	/* predefine some globals or should we always include /usr/include/objc/objc.h */
	=[[scopestack lastChild] define:@"id" type:"identifier" value:@"id"];
	// make them typedefs...
	n=[[scopestack lastChild] define:@"SEL" type:"identifier" value:@"SEL"];
#endif
	}

	/* FIXME: read from an NSInputStream
// how can we easily set up an input stream for "stdin"?

#define YY_INPUT(buf,result,max_size) \
{ \
	 result = [stream read:(uint8_t *)(buf) maxLength:(may_size)];
}
	*/

%}

%%
	/* white space and comments */
{NL}			{ charCount(); /* create node(s) if we want to be able to 100% reconstruct the source! */ }
{WS}			{ charCount(); /* create node(s) if we want to be able to 100% reconstruct the source! */  }

"/*"([^*]*"*")+"/"		{ charCount(); yylval = [Node leaf:@"comment" value:[NSString stringWithUTF8String:yytext]]; /* return(COMMENT); */ }
"//".*$					{ charCount(); yylval = [Node leaf:@"cpp_comment" value:[NSString stringWithUTF8String:yytext]]; /* return(COMMENT); */; }

	/* preprocessor statements */
	/* FIXME: handle \ at end of line, often used by #define */
	/* can be matched similarily to handling of \' embedded into '' */
^"#"([^\n]|(\\[\n]))*$		{ charCount(); yylval=[Node leaf:@"preproc" value:[NSString stringWithUTF8String:yytext]]; /*return(COMMENT);*/ }

	/* identifiers and keywords */

{AT}				{ return(AT_TOKEN); }
{L}({L}|{D})*		{ charCount(); return symbol(); }

	/* numeral CONSTANTs */
0[xX]{H}+{IS}?		{ charCount(); yylval=constant(yytext); return(CONSTANT); }
0{D}+{IS}?			{ charCount(); yylval=constant(yytext); return(CONSTANT); }
{D}+{IS}?			{ charCount(); yylval=constant(yytext); return(CONSTANT); }
L?'(\\.|[^\\'])+'	{ /* ' balance */ charCount(); yylval=constant(yytext); return(CONSTANT); }

{D}+{E}{FS}?		{ charCount(); yylval=constant(yytext); return(CONSTANT); }
{D}*"."{D}+({E})?{FS}?	{ charCount(); yylval=constant(yytext); return(CONSTANT); }
{D}+"."{D}*({E})?{FS}?	{ charCount(); yylval=constant(yytext); return(CONSTANT); }

	/* string CONSTANTs */

L?\"(\\.|[^\\"])*\"	{ /* " balance */ charCount(); yylval=constant(yytext); return(STRING_LITERAL); }

	/* standard operators */

"..."			{ charCount(); return(ELLIPSIS); }
">>="			{ charCount(); return(RIGHT_ASSIGN); }
"<<="			{ charCount(); return(LEFT_ASSIGN); }
"+="			{ charCount(); return(ADD_ASSIGN); }
"-="			{ charCount(); return(SUB_ASSIGN); }
"*="			{ charCount(); return(MUL_ASSIGN); }
"/="			{ charCount(); return(DIV_ASSIGN); }
"%="			{ charCount(); return(MOD_ASSIGN); }
"&="			{ charCount(); return(AND_ASSIGN); }
"^="			{ charCount(); return(XOR_ASSIGN); }
"|="			{ charCount(); return(OR_ASSIGN); }
">>"			{ charCount(); return(RIGHT_OP); }
"<<"			{ charCount(); return(LEFT_OP); }
"++"			{ charCount(); return(INC_OP); }
"--"			{ charCount(); return(DEC_OP); }
"->"			{ charCount(); return(PTR_OP); }
"&&"			{ charCount(); return(AND_OP); }
"||"			{ charCount(); return(OR_OP); }
"<="			{ charCount(); return(LE_OP); }
">="			{ charCount(); return(GE_OP); }
"=="			{ charCount(); return(EQ_OP); }
"!="			{ charCount(); return(NE_OP); }
";"				{ charCount(); return(';'); }
("{"|"<%")		{ charCount(); return('{'); }
("}"|"%>")		{ charCount(); return('}'); }
","				{ charCount(); return(','); }
":"				{ charCount(); return(':'); }
"="				{ charCount(); return('='); }
"("				{ charCount(); return('('); }
")"				{ charCount(); return(')'); }
("["|"<:")		{ charCount(); return('['); }
("]"|":>")		{ charCount(); return(']'); }
"."				{ charCount(); return('.'); }
"&"				{ charCount(); return('&'); }
"!"				{ charCount(); return('!'); }
"~"				{ charCount(); return('~'); }
"-"				{ charCount(); return('-'); }
"+"				{ charCount(); return('+'); }
"*"				{ charCount(); return('*'); }
"/"				{ charCount(); return('/'); }
"%"				{ charCount(); return('%'); }
"<"				{ charCount(); return('<'); }
">"				{ charCount(); return('>'); }
"^"				{ charCount(); return('^'); }
"|"				{ charCount(); return('|'); }
"?"				{ charCount(); return('?'); }
 
	/* "/*">	{ charCount(); yylval = [Node leaf:@"unterminated_comment" value:[NSString stringWithUTF8String:yytext]]; STATE = UNTERMINATED /* return(ERROR); * / } */
	/* "\"">	{ charCount(); yylval = [Node leaf:@"unterminated_string" value:[NSString stringWithUTF8String:yytext]]; STATE = UNTERMINATED /* return(ERROR); * / } */
.				{ charCount(); yylval=[Node leaf:@"bad_character" value:[NSString stringWithUTF8String:yytext]]; /* return(ERROR); */ }

%%

int yywrap(void)
{
	// here we could supply more input and return (0)
	return(1);
}

int symbol(void)
{
	/*
	 * symbol table entries are nodes with type "identifier"
	 * @"value" is the identifier name
	 * @"storage" is the storage class (leaf node e.g. @"static", @"extern", @"auto", @"typedef", @"register") if specified
	 * @"type" is the data type tree (if specified)
	 */
	id s;
	int n;
	char *csym=yytext;
	NSString *sym;
	sym=[NSString stringWithUTF8String:csym];
	if(!nokeyword)
		{ // check for keywords (either C or Obj-C keyword table)
			s=[attoken?atkeywordtab:keywordtab attributeForKey:sym];
			attoken=0;
			if(s)
				return [s intValue];	// keyword found - convert into token code
		}
	nokeyword=0;
	if(objctype)
		{ // check for special keyword
			s=[specialkeywordtab attributeForKey:sym];
			if(s)
				return [s intValue];	// keyword found - convert into token code
		}
	n=[scopestack childrenCount];
	while(n-- > 0)
		{ // loop through scope stack from end (most locally) to global
			// please keep the space between [[ since there is a bug in flex that copies it to output as ]]
			s=[ [scopestack childAtIndex:n] attributeForKey:sym];
			if(s)
				break;
		}
	if(!s)
		{ // add new and still unknown identifier (without type) to most local level
			s=[Node leaf:@"identifier" value:sym];
			// please keep the space between [[ since there is a bug in flex that copies it to output as ]]
			[ [scopestack lastChild] setAttribute:s forKey:sym];
		}
	yylval=s;
	if(typename)
		{ // check if we have a type name here
		typename=0;
		if([s attributeForKey:@"typename"])
			return TYPE_NAME;	/* in current scope this identifier is a typedef'd or @class name */
		}
	return IDENTIFIER;
}

void charCount(void)
{ // count characters so that we know the column position and keep track of line numbers
	int i;
#if 0
	NSLog(@"charCount: %s", yytext);
#endif
	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n')
			column = 0, line++;
		else if (yytext[i] == '\t')
			column += 8 - (column % 8);
		else
			column++;
}

Node *constant(char *str)
{
	return [Node leaf:@"constant" value:[NSString stringWithUTF8String:str]];
}
